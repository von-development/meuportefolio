-- meuPortfolio Full Schema (Flat) - For Direct Execution in SSMS
-- This file is auto-generated by combining all modular SQL scripts for easy execution.

USE master;
GO

-- Create database if it doesn't exist
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'meuPortfolio')
BEGIN
    CREATE DATABASE meuPortfolio;
END
GO

USE meuPortfolio;
GO

-- Create schema if it doesn't exist
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'portfolio')
BEGIN
    EXEC('CREATE SCHEMA portfolio');
END
GO

-- Create Users table
CREATE TABLE portfolio.Users (
    UserID INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL,
    Email NVARCHAR(100) NOT NULL UNIQUE,
    Password NVARCHAR(255) NOT NULL,
    CountryOfResidence NVARCHAR(100) NOT NULL,
    IBAN NVARCHAR(34) NOT NULL,
    UserType NVARCHAR(20) NOT NULL CHECK (UserType IN ('Basic', 'Premium')),
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE()
);
GO

-- Create Portfolios table
CREATE TABLE portfolio.Portfolios (
    PortfolioID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,
    Name NVARCHAR(100) NOT NULL,
    CreationDate DATETIME DEFAULT GETDATE(),
    CurrentProfitPercentage DECIMAL(10,2) DEFAULT 0,
    CurrentFunds DECIMAL(18,2) DEFAULT 0,
    FOREIGN KEY (UserID) REFERENCES portfolio.Users(UserID)
);
GO

-- Create Assets table
CREATE TABLE portfolio.Assets (
    AssetID INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL,
    Symbol NVARCHAR(20) NOT NULL UNIQUE,
    AssetType NVARCHAR(20) NOT NULL CHECK (AssetType IN ('Company', 'Index', 'Cryptocurrency', 'Commodity')),
    Price DECIMAL(18,2) NOT NULL,
    MinimumValue DECIMAL(18,2) NOT NULL,
    MaximumValue DECIMAL(18,2) NOT NULL,
    OpeningValue DECIMAL(18,2) NOT NULL,
    ChangePercentage DECIMAL(10,2) DEFAULT 0,
    Volume BIGINT NOT NULL,
    AvailableShares DECIMAL(18,6) NOT NULL,
    LastUpdated DATETIME DEFAULT GETDATE()
);
GO

-- CompanyDetails table
CREATE TABLE portfolio.CompanyDetails (
    AssetID INT PRIMARY KEY,
    Sector NVARCHAR(100),
    Industry NVARCHAR(100),
    Country NVARCHAR(100),
    FOREIGN KEY (AssetID) REFERENCES portfolio.Assets(AssetID)
);
GO

-- IndexDetails table
CREATE TABLE portfolio.IndexDetails (
    AssetID INT PRIMARY KEY,
    Country NVARCHAR(100),
    FOREIGN KEY (AssetID) REFERENCES portfolio.Assets(AssetID)
);
GO

-- Create Transactions table
CREATE TABLE portfolio.Transactions (
    TransactionID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,
    PortfolioID INT NOT NULL,
    AssetID INT NOT NULL,
    TransactionType NVARCHAR(10) NOT NULL CHECK (TransactionType IN ('Buy', 'Sell')),
    PercentageOfStock DECIMAL(10,2) NOT NULL,
    TransactionDate DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES portfolio.Users(UserID),
    FOREIGN KEY (PortfolioID) REFERENCES portfolio.Portfolios(PortfolioID),
    FOREIGN KEY (AssetID) REFERENCES portfolio.Assets(AssetID)
);
GO

-- Create Subscriptions table
CREATE TABLE portfolio.Subscriptions (
    SubscriptionID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL UNIQUE,
    StartDate DATETIME NOT NULL,
    EndDate DATETIME NOT NULL,
    Value DECIMAL(18,2) NOT NULL,
    FOREIGN KEY (UserID) REFERENCES portfolio.Users(UserID)
);
GO

-- RiskMetrics table
CREATE TABLE portfolio.RiskMetrics (
    MetricID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,
    MaximumDrawdown DECIMAL(10,2),
    Beta DECIMAL(10,2),
    SharpeRatio DECIMAL(10,2),
    AbsoluteReturn DECIMAL(10,2),
    CurrentDate DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES portfolio.Users(UserID)
);
GO

-- PaymentMethods table
CREATE TABLE portfolio.PaymentMethods (
    PaymentMethodID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,
    MethodType NVARCHAR(50),
    Details NVARCHAR(255),
    FOREIGN KEY (UserID) REFERENCES portfolio.Users(UserID)
);
GO

-- Create indexes for Users table
CREATE NONCLUSTERED INDEX IX_Users_Email ON portfolio.Users(Email);
CREATE NONCLUSTERED INDEX IX_Users_UserType ON portfolio.Users(UserType);
GO

-- Create indexes for Assets table
CREATE NONCLUSTERED INDEX IX_Assets_Symbol ON portfolio.Assets(Symbol);
CREATE NONCLUSTERED INDEX IX_Assets_AssetType ON portfolio.Assets(AssetType);
CREATE NONCLUSTERED INDEX IX_Assets_Price ON portfolio.Assets(Price);
GO

-- Create indexes for Transactions table
CREATE NONCLUSTERED INDEX IX_Transactions_UserID ON portfolio.Transactions(UserID);
CREATE NONCLUSTERED INDEX IX_Transactions_PortfolioID ON portfolio.Transactions(PortfolioID);
CREATE NONCLUSTERED INDEX IX_Transactions_AssetID ON portfolio.Transactions(AssetID);
CREATE NONCLUSTERED INDEX IX_Transactions_Date ON portfolio.Transactions(TransactionDate);
GO

-- Function to calculate portfolio value
CREATE FUNCTION portfolio.fn_CalculatePortfolioValue
(
    @PortfolioID INT
)
RETURNS DECIMAL(18,2)
AS
BEGIN
    DECLARE @TotalValue DECIMAL(18,2)
    SELECT @TotalValue = SUM(t.PercentageOfStock * a.Price)
    FROM portfolio.Transactions t
    INNER JOIN portfolio.Assets a ON t.AssetID = a.AssetID
    WHERE t.PortfolioID = @PortfolioID
    AND t.TransactionType = 'Buy'
    RETURN ISNULL(@TotalValue, 0)
END;
GO

-- Function to calculate portfolio profit percentage
CREATE FUNCTION portfolio.fn_CalculatePortfolioProfit
(
    @PortfolioID INT
)
RETURNS DECIMAL(10,2)
AS
BEGIN
    DECLARE @InitialValue DECIMAL(18,2)
    DECLARE @CurrentValue DECIMAL(18,2)
    SELECT @InitialValue = SUM(t.PercentageOfStock * a.Price)
    FROM portfolio.Transactions t
    INNER JOIN portfolio.Assets a ON t.AssetID = a.AssetID
    WHERE t.PortfolioID = @PortfolioID
    AND t.TransactionType = 'Buy'
    SELECT @CurrentValue = SUM(t.PercentageOfStock * a.Price)
    FROM portfolio.Transactions t
    INNER JOIN portfolio.Assets a ON t.AssetID = a.AssetID
    WHERE t.PortfolioID = @PortfolioID
    AND t.TransactionType = 'Buy'
    RETURN CASE 
        WHEN @InitialValue = 0 THEN 0
        ELSE ((@CurrentValue - @InitialValue) / @InitialValue) * 100
    END
END;
GO

-- Trigger for Users table
CREATE TRIGGER portfolio.TR_Users_UpdateTimestamp
ON portfolio.Users
AFTER UPDATE
AS
BEGIN
    UPDATE portfolio.Users
    SET UpdatedAt = GETDATE()
    FROM portfolio.Users u
    INNER JOIN inserted i ON u.UserID = i.UserID;
END;
GO

-- Trigger for Assets table
CREATE TRIGGER portfolio.TR_Assets_UpdateTimestamp
ON portfolio.Assets
AFTER UPDATE
AS
BEGIN
    UPDATE portfolio.Assets
    SET LastUpdated = GETDATE()
    FROM portfolio.Assets a
    INNER JOIN inserted i ON a.AssetID = i.AssetID;
END;
GO

-- View for portfolio summary
CREATE VIEW portfolio.vw_PortfolioSummary
AS
SELECT 
    p.PortfolioID,
    p.Name AS PortfolioName,
    u.Name AS UserName,
    p.CurrentFunds,
    p.CurrentProfitPercentage,
    p.CreationDate,
    COUNT(t.TransactionID) AS TotalTransactions
FROM portfolio.Portfolios p
INNER JOIN portfolio.Users u ON p.UserID = u.UserID
LEFT JOIN portfolio.Transactions t ON p.PortfolioID = t.PortfolioID
GROUP BY p.PortfolioID, p.Name, u.Name, p.CurrentFunds, p.CurrentProfitPercentage, p.CreationDate;
GO

-- View for asset holdings
CREATE VIEW portfolio.vw_AssetHoldings
AS
SELECT 
    p.PortfolioID,
    p.Name AS PortfolioName,
    a.Name AS AssetName,
    a.Symbol,
    a.AssetType,
    a.Price,
    SUM(CASE WHEN t.TransactionType = 'Buy' THEN t.PercentageOfStock ELSE -t.PercentageOfStock END) AS TotalPercentage,
    a.Price * SUM(CASE WHEN t.TransactionType = 'Buy' THEN t.PercentageOfStock ELSE -t.PercentageOfStock END) AS CurrentValue
FROM portfolio.Portfolios p
INNER JOIN portfolio.Transactions t ON p.PortfolioID = t.PortfolioID
INNER JOIN portfolio.Assets a ON t.AssetID = a.AssetID
GROUP BY p.PortfolioID, p.Name, a.Name, a.Symbol, a.AssetType, a.Price;
GO

-- View for user subscriptions
CREATE VIEW portfolio.vw_UserSubscriptions
AS
SELECT 
    u.UserID,
    u.Name AS UserName,
    u.UserType,
    s.StartDate,
    s.EndDate,
    s.Value,
    CASE 
        WHEN s.EndDate > GETDATE() THEN 'Active'
        ELSE 'Expired'
    END AS SubscriptionStatus
FROM portfolio.Users u
LEFT JOIN portfolio.Subscriptions s ON u.UserID = s.UserID;
GO

-- Procedure to create a new user
CREATE PROCEDURE portfolio.sp_CreateUser
    @Name NVARCHAR(100),
    @Email NVARCHAR(100),
    @Password NVARCHAR(255),
    @CountryOfResidence NVARCHAR(100),
    @IBAN NVARCHAR(34),
    @UserType NVARCHAR(20)
AS
BEGIN
    INSERT INTO portfolio.Users (Name, Email, Password, CountryOfResidence, IBAN, UserType)
    VALUES (@Name, @Email, @Password, @CountryOfResidence, @IBAN, @UserType);
    SELECT SCOPE_IDENTITY() AS UserID;
END;
GO

-- Procedure to create a new portfolio
CREATE PROCEDURE portfolio.sp_CreatePortfolio
    @UserID INT,
    @Name NVARCHAR(100)
AS
BEGIN
    INSERT INTO portfolio.Portfolios (UserID, Name)
    VALUES (@UserID, @Name);
    SELECT SCOPE_IDENTITY() AS PortfolioID;
END;
GO

-- Procedure to execute a transaction
CREATE PROCEDURE portfolio.sp_ExecuteTransaction
    @UserID INT,
    @PortfolioID INT,
    @AssetID INT,
    @TransactionType NVARCHAR(10),
    @PercentageOfStock DECIMAL(10,2)
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
        INSERT INTO portfolio.Transactions (UserID, PortfolioID, AssetID, TransactionType, PercentageOfStock)
        VALUES (@UserID, @PortfolioID, @AssetID, @TransactionType, @PercentageOfStock);
        UPDATE portfolio.Portfolios
        SET CurrentFunds = portfolio.fn_CalculatePortfolioValue(@PortfolioID),
            CurrentProfitPercentage = portfolio.fn_CalculatePortfolioProfit(@PortfolioID)
        WHERE PortfolioID = @PortfolioID;
        COMMIT TRANSACTION;
        SELECT SCOPE_IDENTITY() AS TransactionID;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        THROW;
    END CATCH
END;
GO

-- Procedure to update asset prices
CREATE PROCEDURE portfolio.sp_UpdateAssetPrice
    @AssetID INT,
    @NewPrice DECIMAL(18,2)
AS
BEGIN
    UPDATE portfolio.Assets
    SET Price = @NewPrice,
        ChangePercentage = ((@NewPrice - Price) / Price) * 100,
        LastUpdated = GETDATE()
    WHERE AssetID = @AssetID;
END;
GO 